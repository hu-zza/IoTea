openapi: 3.0.1
info:
  title: IoTea
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/devices:
    get:
      tags:
        - Device Management
      operationId: getAllDevices
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceOutput'
      summary: Returns a list with all Devices
    post:
      tags:
        - Device Management
      operationId: postDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceInput'
        required: true
      responses:
        "201":
          description: Created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DeviceOutput'
      summary: Creates a Device
  /api/devices/{identifier}:
    get:
      tags:
        - Device Management
      operationId: getDevicesByIdentifier
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
            example: Desk
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceOutput'
      summary: Gets all Devices (as a list) those id, uid or name matches {identifier}
  /api/devices/id/{id}:
    get:
      tags:
        - Device Management
      operationId: getDeviceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DeviceOutput'
      summary: Gets a Device identified by {id}
    put:
      tags:
        - Device Management
      operationId: putDeviceToId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DeviceOutput'
      summary: Creates or updates a Device under specified {id}
    delete:
      tags:
        - Device Management
      operationId: deleteDeviceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        "204":
          description: No Content
      summary: Deletes a Device identified by {id}
  /api/devices/uid/{uid}:
    get:
      tags:
        - Device Management
      operationId: getDeviceByUid
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            example: '0x000000003ac864d5'
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DeviceOutput'
      summary: Gets a Device identified by {uid}
    put:
      tags:
        - Device Management
      operationId: putDeviceToUid
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            example: '0x000000003ac864d5'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DeviceOutput'
      summary: Creates or updates a Device under specified {uid}
    delete:
      tags:
        - Device Management
      operationId: deleteDeviceByUid
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            example: '0x000000003ac864d5'
      responses:
        "204":
          description: No Content
      summary: Deletes a Device identified by {uid}
  /api/devices/name/{name}:
    get:
      tags:
        - Device Management
      operationId: getDeviceByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: Desk
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DeviceOutput'
      summary: Gets a Device identified by {name}
    put:
      tags:
        - Device Management
      operationId: putDeviceToName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: Desk
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DeviceOutput'
      summary: Creates or updates a Device under specified {name}
    delete:
      tags:
        - Device Management
      operationId: deleteDeviceByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: Desk
      responses:
        "204":
          description: No Content
      summary: Deletes a Device identified by {name}
  /api/devices/ip/{ip}:
    get:
      tags:
        - Device Management
      operationId: getDevicesByIp
      parameters:
        - name: ip
          in: path
          required: true
          schema:
            type: string
            example: 192.168.0.50
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceOutput'
      summary: Gets all Device those ip matches {identifier}

  /api/commands:
    get:
      tags:
        - Command Management
      operationId: getAllCommands
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommandOutput'
      summary: Returns a list with all Commands
    post:
      tags:
        - Command Management
      operationId: postDevice_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandInput'
        required: true
      responses:
        "201":
          description: Created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommandOutput'
      summary: Creates a Command
  /api/commands/{identifier}:
    get:
      tags:
        - Command Management
      operationId: getCommandsByIdentifier
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
            example: YeeToggle
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommandOutput'
      summary: Gets all Commands (as a list) those id or name matches {identifier}
  /api/commands/id/{id}:
    get:
      tags:
        - Command Management
      operationId: getCommandById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommandOutput'
      summary: Gets a Command identified by {id}
    put:
      tags:
        - Command Management
      operationId: putDeviceToId_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommandOutput'
      summary: Creates or updates a Command under specified {id}
    delete:
      tags:
        - Command Management
      operationId: deleteCommandById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        "204":
          description: No Content
      summary: Deletes a Command identified by {id}
  /api/commands/name/{name}:
    get:
      tags:
        - Command Management
      operationId: getCommandByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: YeeToggle
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommandOutput'
      summary: Gets a Command identified by {name}
    put:
      tags:
        - Command Management
      operationId: putDeviceToName_1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: YeeToggle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CommandOutput'
      summary: Creates or updates a Command under specified {name}
    delete:
      tags:
        - Command Management
      operationId: deleteCommandByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: YeeToggle
      responses:
        "204":
          description: No Content
      summary: Deletes a Command identified by {name}

  /api/jobs:
    get:
      tags:
        - Job Management
      operationId: getAllJobs_1
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobOutput'
      summary: Returns a list with all Jobs
    post:
      tags:
        - Job Management
      operationId: postJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInput'
        required: true
      responses:
        "201":
          description: Created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Creates a Job
  /api/jobs/{identifier}:
    get:
      tags:
        - Job Management
      operationId: getJobsByIdentifier_1
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobOutput'
      summary: Gets all Job (as a list) those id or name matches {identifier}
  /api/jobs/id/{id}:
    get:
      tags:
        - Job Management
      operationId: getJobById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Gets a Job identified by {id}
    put:
      tags:
        - Job Management
      operationId: putJobToId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Creates or updates a Job under specified {id}
    post:
      tags:
        - Job Management
      operationId: runJobById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobContext'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Runs a Job specified by {id} with parameters (request body)
    delete:
      tags:
        - Job Management
      operationId: deleteJobById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        "204":
          description: No Content
      summary: Deletes a Job identified by {id}
  /api/jobs/name/{name}:
    get:
      tags:
        - Job Management
      operationId: getJobByName_1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Gets a Job identified by {name}
    put:
      tags:
        - Job Management
      operationId: putJobToName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Creates or updates a Job under specified {name}
    post:
      tags:
        - Job Management
      operationId: runJobByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobContext'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Runs a Job specified by {name} with parameters (request body)
    delete:
      tags:
        - Job Management
      operationId: deleteJobByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      responses:
        "204":
          description: No Content
      summary: Deletes a Job identified by {name}

  /api:
    get:
      tags:
        - LOLLful
      operationId: getAllJobs
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobOutput'
      summary: Returns a list with all Jobs
  /api/{identifier}:
    get:
      tags:
        - LOLLful
      operationId: getJobsByIdentifier
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobOutput'
      summary: Gets all Job (as a list) those id or name matches {identifier}
  /api/id/{id}:
    get:
      tags:
        - LOLLful
      operationId: getJobById_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Gets a Job identified by {id}
  /api/name/{name}:
    get:
      tags:
        - LOLLful
      operationId: getJobByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Gets a Job identified by {name}
  /api/call/{id}/as/{name}:
    get:
      tags:
        - LOLLful
      operationId: setJobName
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Sets the {name} of a Job identified by {id}
  /api/{deviceName}/{commandName}:
    get:
      tags:
        - LOLLful
      operationId: createJob
      parameters:
        - name: deviceName
          in: path
          required: true
          schema:
            type: string
            example: Desk
        - name: commandName
          in: path
          required: true
          schema:
            type: string
            example: YeeToggle
      responses:
        "201":
          description: Created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Creates a Job with auto-generated name
  /api/{deviceName}/{commandName}/as/{jobName}:
    get:
      tags:
        - LOLLful
      operationId: createNamedJob
      parameters:
        - name: jobName
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
        - name: deviceName
          in: path
          required: true
          schema:
            type: string
        - name: commandName
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Creates a Job with the specified {jobName}
  /api/run/{name}:
    get:
      tags:
        - LOLLful
      operationId: runJobByNameAlias
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      responses:
        "202":
          description: Accepted
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Runs a Job specified by {name}
  /api/run/{name}/{parameters}:
    get:
      tags:
        - LOLLful
      operationId: runJobByNameAlias_1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: SetDeskBright
        - name: parameters
          in: path
          required: true
          schema:
            type: string
            example: 100
      responses:
        "202":
          description: Accepted
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobOutput'
      summary: Runs a Job specified by {name} with raw {parameters}
  /api/delete/{name}:
    get:
      tags:
        - LOLLful
      operationId: deleteJobByName_1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: ToggleDesk
      responses:
        "204":
          description: No Content
      summary: Deletes a Job identified by {name}
components:
  schemas:
    DeviceInput:
      required:
        - ip
        - name
        - port
        - uid
      type: object
      properties:
        uid:
          maxLength: 255
          minLength: 1
          type: string
          example: '0x000000003ac864d5'
        name:
          maxLength: 255
          minLength: 1
          type: string
          example: Desk
        ip:
          maxLength: 255
          minLength: 1
          type: string
          example: 192.168.0.50
        port:
          maximum: 65535
          minimum: 0
          type: integer
          format: int32
          example: 55443
    DeviceOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        uid:
          type: string
          example: '0x000000003ac864d5'
        name:
          type: string
          example: Desk
        address:
          $ref: '#/components/schemas/DeviceAddressOutput'
        port:
          type: integer
          format: int32
          example: 55443
    DeviceAddressOutput:
      type: object
      properties:
        ip:
          type: string
          example: 192.168.0.50
        reachable:
          type: boolean
          example: true

    CommandInput:
      required:
        - name
        - template
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          example: YeeToggle
        template:
          maxLength: 30000
          minLength: 0
          type: string
          example: '{"method": "toggle", "params": []}'
        note:
          maxLength: 30000
          minLength: 0
          type: string
          example: 'Toggle command for Yeelight devices.'
    CommandOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: YeeToggle
        template:
          type: string
          example: '{"id": 1, "method": "toggle", "params": []}'
        note:
          type: string
          example: 'Toggle command for Yeelight devices.'

    JobInput:
      required:
        - command_id
        - device_id
        - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          example: ToggleDesk
        device_id:
          maximum: 2147483647
          minimum: 1
          type: integer
          format: int32
          example: 1
        command_id:
          maximum: 2147483647
          minimum: 1
          type: integer
          format: int32
          example: 1
    JobOutput:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: ToggleDesk
        device:
          $ref: '#/components/schemas/DeviceOutput'
        command:
          $ref: '#/components/schemas/CommandOutput'
        result:
          $ref: '#/components/schemas/Run'
    JobContext:
      type: object
      properties:
        parameters:
          type: array
          example: '[100]'
    Run:
      type: object
      properties:
        started:
          type: string
          format: date-time
          example: "2022-01-10T20:30:40.299970222"
        parameters:
          type: array
          example: [ ]
        payload:
          type: string
          example: '{"id": 1, "method": "toggle", "params": []}'
        response:
          type: string
          example: '{"method": "props", "params": {"power": "on"}}'
        raw_parameters:
          type: string
          example: null
